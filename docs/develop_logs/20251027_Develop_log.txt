# 2025년 10월 27일 개발 로그

## 1. 이전 커밋 내용 반영

### 1.1. `c813fb1` 커밋: feat: Initial project skeleton for core logic and frontend
*   핵심 로직 및 프론트엔드를 위한 초기 프로젝트 스켈레톤 설정.

### 1.2. `839f958` 커밋: feat(frontend): 초기 보드 및 기물 렌더링 구현
*   프론트엔드에서 게임 보드와 기물을 렌더링하는 초기 기능 구현.

### 1.3. `687e908` 커밋: feat(frontend): 절대 위치 설정
*   `tileCoordinates.ts` 파일을 통해 타일의 절대 위치를 설정하는 기능 구현.

## 2. 핵심 로직 (Core Logic) 구현 및 개선

### 2.1. `tileCoordinates.ts` 초기 완성 및 수정
*   기존의 부분적인 타일 좌표 데이터를 분석하여 `x`, `y` 좌표 계산 공식을 도출.
*   보드 전체(11x12)의 타일 좌표를 포함하는 `tileCoordinates.ts` 파일 완성.
*   좌표계 오류로 인한 문제 발생 후, 사용자 요청에 따라 `tileCoordinates.ts` 파일을 이전(왜곡된) 상태로 복구.

### 2.2. 게임 상태 및 기물 이동 로직 구현
*   규칙서의 초기 배치 정보를 기반으로 `createInitialGameState` 함수 구현.
*   '경호원(Guard)' 및 '수반(Commander)' 기물의 `getValidMoves` 함수 구현.
    *   초기에는 표준 축 좌표계(Axial Coordinates) 기반으로 구현.
    *   이후 사용자 피드백을 통해 프로젝트의 그리드가 '오프셋 좌표계(Offset Coordinates)'를 사용함을 파악.
    *   `q`가 행(세로), `r`이 열(가로)임을 확인하고, 열(`r`)의 홀수/짝수 여부에 따라 이웃 칸을 계산하는 올바른 오프셋 좌표계 로직으로 `getValidMoves` 함수 수정 완료.
*   기본적인 `movePiece` 함수 구현.

## 3. 프론트엔드 (Frontend) 통합 및 개선

### 3.1. `core-logic` 연동
*   `useGameState.ts` 훅을 `core-logic`의 함수(`createInitialGameState`, `getValidMoves`, `movePiece`)를 사용하도록 리팩토링.
*   `GameInfo.tsx` 컴포넌트를 `core-logic`의 타입과 데이터 구조에 맞게 수정.
*   `App.tsx` 컴포넌트가 `useGameState` 훅의 새로운 상태와 핸들러를 `Board` 및 `GameInfo` 컴포넌트에 올바르게 전달하도록 수정.
*   `Board.tsx` 컴포넌트를 `gameState.board`에서 기물을 렌더링하고, 클릭 이벤트를 처리하며, 선택된 기물과 유효 이동 경로를 시각적으로 표시하도록 리팩토링.
*   더 이상 사용하지 않는 `lib/mockData.ts` 파일 삭제.

## 4. 버그 수정 및 디버깅

### 4.1. '경호원'의 아군 기물 위 이동 버그 수정
*   `getValidMoves` 함수에 필터링 로직을 추가하여 '경호원'이 아군 기물이 있는 칸으로는 이동할 수 없도록 수정.

### 4.2. '2칸 이동' 시각적 오류 및 좌표계 불일치 문제 해결
*   `tileCoordinates.ts` 파일의 좌표 왜곡으로 인해 논리적 1칸 이동이 시각적으로 2칸처럼 보이던 문제 발생.
*   초기에는 기하학적으로 순수한 좌표를 생성하려 했으나, SVG 뷰포트 범위를 벗어나 기물이 화면 밖으로 나가는 문제 발생.
*   사용자 요청에 따라 `tileCoordinates.ts` 파일을 이전(왜곡된) 상태로 복구.
*   로그를 통한 심층 디버깅 결과, `getValidMoves` 함수의 좌표계 해석 오류(축 좌표계 vs 오프셋 좌표계)가 근본 원인임을 파악.
*   `q`가 행, `r`이 열임을 확인하고, 열(`r`)의 홀수/짝수 여부에 따라 이웃 칸을 계산하는 올바른 오프셋 좌표계 로직으로 `getValidMoves` 함수를 최종 수정하여 문제 해결.

## 5. 테스트 환경 설정

*   `packages/core-logic` 워크스페이스에 `vitest` 테스트 프레임워크 설치.
*   `packages/core-logic/package.json`에 `test` 스크립트 추가.
*   `packages/core-logic/src/index.test.ts` 파일 생성 및 `getValidMoves` 테스트 케이스 구조화. (향후 단위 테스트 작성을 위함)

## 6. 현재 상태

*   '경호원' 및 '수반' 기물의 이동 로직이 올바르게 작동하며, 프론트엔드에서 상호작용이 가능함.
*   기물 이동 관련 시각적/논리적 버그가 해결됨.
*   향후 다른 기물들의 이동 로직을 추가할 준비가 완료됨.
